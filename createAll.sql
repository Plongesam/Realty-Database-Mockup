-- MySQL Script generated by MySQL Workbench
-- Sun Nov 15 15:08:15 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

-- -----------------------------------------------------
-- Table `Employee`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Employee ;

CREATE TABLE IF NOT EXISTS Employee (
  Employee_ID INT NOT NULL,
  Firstname VARCHAR(45),
  Lastname VARCHAR(45),
  City VARCHAR(45),
  Street VARCHAR(45),
  Zipcode VARCHAR(5),
  State VARCHAR(2),
  Unit_num INT,
  work_phone VARCHAR(45),
  home_phone VARCHAR(45),
  cell-phone VARCHAR(45),
  Hire_date DATE,
  PRIMARY KEY (Employee_ID));


-- -----------------------------------------------------
-- Table `Owner`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Owner ;

CREATE TABLE IF NOT EXISTS Owner (
  Owner_ID INT NOT NULL,
  Firstname VARCHAR(45),
  Lastname VARCHAR(45),
  City VARCHAR(45),
  Street VARCHAR(45),
  Zipcode VARCHAR(5),
  State VARCHAR(2),
  work_phone VARCHAR(45),
  home_phone VARCHAR(45),
  cell-phone VARCHAR(45),
  Corp_name VARCHAR(45),
  PRIMARY KEY (Owner_ID));



-- -----------------------------------------------------
-- Table `Client`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Client ;

CREATE TABLE IF NOT EXISTS Client (
  Client_ID INT NOT NULL,
  Firstname VARCHAR(45),
  Lastname VARCHAR(45),
  City VARCHAR(45),
  Street VARCHAR(45),
  Zipcode VARCHAR(5),
  State VARCHAR(2),
  work_phone VARCHAR(45),
  home_phone VARCHAR(45),
  cell-phone VARCHAR(45),
  Preferences LONGTEXT,
  Max_rent DOUBLE,
  PRIMARY KEY (Client_ID));



-- -----------------------------------------------------
-- Table `Manages`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Manages ;

CREATE TABLE IF NOT EXISTS Manages (
  Employee_ID INT NOT NULL,
  Supervisor_ID INT NOT NULL,
  PRIMARY KEY (Employee_ID),
  FOREIGN KEY (Employee_ID)
  REFERENCES Employee (Employee_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  FOREIGN KEY (Supervisor_ID)
  REFERENCES Employee (Employee_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



-- -----------------------------------------------------
-- Table `Employee_Email`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Employee_Email ;

CREATE TABLE IF NOT EXISTS Employee_Email (
  Employee_ID INT NOT NULL,
  Email_addr VARCHAR(45),
  PRIMARY KEY (Employee_ID),
  FOREIGN KEY (Employee_ID)
  REFERENCES Employee (Employee_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



-- -----------------------------------------------------
-- Table `Partner`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Partner ;

CREATE TABLE IF NOT EXISTS Partner (
  Employee_ID INT NOT NULL,
  PRIMARY KEY (Employee_ID),
  FOREIGN KEY (Employee_ID)
  REFERENCES Employee (Employee_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



-- -----------------------------------------------------
-- Table `Associate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Associate ;

CREATE TABLE IF NOT EXISTS Associate (
  Employee_ID INT NOT NULL,
  PRIMARY KEY (Employee_ID),
  CONSTRAINT Employee_ID
  FOREIGN KEY (Employee_ID)
  REFERENCES Employee (Employee_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



-- -----------------------------------------------------
-- Table `Property`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Property ;

CREATE TABLE IF NOT EXISTS Property (
  number INT NOT NULL,
  City VARCHAR(45),
  Street VARCHAR(45),
  Zipcode VARCHAR(45),
  State VARCHAR(2),
  Unit_num INT,
  Asking_Rent DOUBLE,
  Fee DOUBLE,
  Has_Ad BOOLEAN,
  PRIMARY KEY (number));



-- -----------------------------------------------------
-- Table `Commercial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Commercial ;

CREATE TABLE IF NOT EXISTS Commercial (
  number INT NOT NULL,
  PRIMARY KEY (number),
  FOREIGN KEY (number)
  REFERENCES Property (number)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



-- -----------------------------------------------------
-- Table `Residential`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Residential ;

CREATE TABLE IF NOT EXISTS Residential (
  number INT NOT NULL,
  num_bed DOUBLE,
  num_bath DOUBLE,
  PRIMARY KEY (number),
  FOREIGN KEY (number)
  REFERENCES Property (number)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



-- -----------------------------------------------------
-- Table `Industrial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Industrial ;

CREATE TABLE IF NOT EXISTS Industrial (
  number INT NOT NULL,
  PRIMARY KEY (number),
  FOREIGN KEY (number)
  REFERENCES Property (number)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



-- -----------------------------------------------------
-- Table `Owns'
-- -----------------------------------------------------
DROP TABLE IF EXISTS Owns ;

CREATE TABLE IF NOT EXISTS Owns (
  number INT NOT NULL,
  Owner_ID INT NOT NULL,
  PRIMARY KEY (number),
  FOREIGN KEY (Owner_ID)
  REFERENCES Owner (Owner_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  FOREIGN KEY (number)
  REFERENCES Property (number)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



-- -----------------------------------------------------
-- Table `Represents`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Represents ;

CREATE TABLE IF NOT EXISTS Represents (
  Owner_ID INT NOT NULL,
  Employee_ID INT NOT NULL,
  PRIMARY KEY (Owner_ID),
  FOREIGN KEY (Employee_ID)
  REFERENCES Partner (Employee_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  FOREIGN KEY (Owner_ID)
  REFERENCES Owner (Owner_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



-- -----------------------------------------------------
-- Table `Assigned`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Assigned ;

CREATE TABLE IF NOT EXISTS Assigned (
  number INT NOT NULL,
  Employee_ID INT,
  PRIMARY KEY (number),
  FOREIGN KEY (number)
  REFERENCES Property (number)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  FOREIGN KEY (Employee_ID)
  REFERENCES Associate (Employee_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



-- -----------------------------------------------------
-- Table `Views`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Views ;

CREATE TABLE IF NOT EXISTS Views (
  Client_ID INT NOT NULL,
  viewdate DATE NOT NULL,
  viewmonth INT NOT NULL,
  viewyear INT NOT NULL,
  prop_num INT NOT NULL,
  Employee_ID INT,
  viewtime TIME,
  PRIMARY KEY (Client_ID, viewdate, prop_num),
  FOREIGN KEY (Client_ID)
  REFERENCES Client (Client_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  FOREIGN KEY (Employee_ID)
  REFERENCES Associate (Employee_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  FOREIGN KEY (prop_num)
  REFERENCES Property (number)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



-- -----------------------------------------------------
-- Table `Lease`
-- -----------------------------------------------------
DROP TABLE IF EXISTS Lease ;

CREATE TABLE IF NOT EXISTS Lease (
  Client_ID INT NOT NULL,
  Employee_ID INT NOT NULL,
  prop_num INT NOT NULL,
  lease_num INT NOT NULL,
  rent DOUBLE NOT NULL,
  deposit DOUBLE,
  start DATE NOT NULL,
  finish DATE NOT NULL,
  PRIMARY KEY (Client_ID, Employee_ID, prop_num),
  FOREIGN KEY (Client_ID)
  REFERENCES Client (Client_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  FOREIGN KEY (Employee_ID)
  REFERENCES Associate (Employee_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  FOREIGN KEY (prop_num)
  REFERENCES Property (number)
    ON DELETE CASCADE
    ON UPDATE CASCADE);

DROP TRIGGER IF EXISTS Lease_AFTER_INSERT;
CREATE DEFINER = CURRENT_USER TRIGGER Lease_AFTER_INSERT AFTER INSERT ON Lease FOR EACH ROW
BEGIN
UPDATE Property
	SET Has_Ad = FALSE WHERE Property.number = new.number;
END

CREATE FUNCTION quarterly_fees()
  RETURNS DOUBLE
  CONTAINS SQL READS SQL DATA
BEGIN
  DECLARE fees DOUBLE;
  SELECT SUM(Fee) * 3 INTO fees
  FROM Property
  RETURN fees;
END;